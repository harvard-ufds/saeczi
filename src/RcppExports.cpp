// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// by_index
SEXP by_index(Rcpp::CharacterVector names, Rcpp::NumericVector vals, Rcpp::CharacterVector to_id);
RcppExport SEXP _saeczi_by_index(SEXP namesSEXP, SEXP valsSEXP, SEXP to_idSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type names(namesSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type vals(valsSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type to_id(to_idSEXP);
    rcpp_result_gen = Rcpp::wrap(by_index(names, vals, to_id));
    return rcpp_result_gen;
END_RCPP
}
// predict_zi
SEXP predict_zi(Eigen::MatrixXd& beta_lm, Eigen::MatrixXd& beta_glm, Rcpp::List& u_lm, Rcpp::List& u_glm, Eigen::MatrixXd& design_mat_lm, Eigen::MatrixXd& design_mat_glm);
RcppExport SEXP _saeczi_predict_zi(SEXP beta_lmSEXP, SEXP beta_glmSEXP, SEXP u_lmSEXP, SEXP u_glmSEXP, SEXP design_mat_lmSEXP, SEXP design_mat_glmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type beta_lm(beta_lmSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type beta_glm(beta_glmSEXP);
    Rcpp::traits::input_parameter< Rcpp::List& >::type u_lm(u_lmSEXP);
    Rcpp::traits::input_parameter< Rcpp::List& >::type u_glm(u_glmSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type design_mat_lm(design_mat_lmSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type design_mat_glm(design_mat_glmSEXP);
    rcpp_result_gen = Rcpp::wrap(predict_zi(beta_lm, beta_glm, u_lm, u_glm, design_mat_lm, design_mat_glm));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_saeczi_by_index", (DL_FUNC) &_saeczi_by_index, 3},
    {"_saeczi_predict_zi", (DL_FUNC) &_saeczi_predict_zi, 6},
    {NULL, NULL, 0}
};

RcppExport void R_init_saeczi(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
