// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// predict
SEXP predict(const Rcpp::DataFrame& newdata, const String& domain, const Eigen::MatrixXd& lm, const Eigen::MatrixXd& glm, const Rcpp::List& u, const Rcpp::CharacterVector& lm_X, const Rcpp::CharacterVector& glm_X);
RcppExport SEXP _saeczi_predict(SEXP newdataSEXP, SEXP domainSEXP, SEXP lmSEXP, SEXP glmSEXP, SEXP uSEXP, SEXP lm_XSEXP, SEXP glm_XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::DataFrame& >::type newdata(newdataSEXP);
    Rcpp::traits::input_parameter< const String& >::type domain(domainSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type lm(lmSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type glm(glmSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type u(uSEXP);
    Rcpp::traits::input_parameter< const Rcpp::CharacterVector& >::type lm_X(lm_XSEXP);
    Rcpp::traits::input_parameter< const Rcpp::CharacterVector& >::type glm_X(glm_XSEXP);
    rcpp_result_gen = Rcpp::wrap(predict(newdata, domain, lm, glm, u, lm_X, glm_X));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_saeczi_predict", (DL_FUNC) &_saeczi_predict, 7},
    {NULL, NULL, 0}
};

RcppExport void R_init_saeczi(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
